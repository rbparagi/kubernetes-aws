Documenting the kubeadm setup in aws with single master node

Create EC2 instance in AWS t.medium - 2 CPU and 4 GB memory

important to things to node - AWS Linux AMI2 support Kubernetes 1.28 version. Higher version has porblem to install kubernentes binaries with below errors.
So lets plan to install the kubernetes with 1.28 version
    Error: Package: kubeadm-1.31.4-150500.1.1.x86_64 (kubernetes)
           Requires: cri-tools >= 1.30.0
           Available: cri-tools-1.25.0-1.amzn2.0.1.x86_64 (amzn2-core)

CONTROLPLABE node
Follow the below series of steps to install the control planne node

1 - Disable swap - sudo swapoff -a
    Make this change persistent across reboots by commenting out swap entries in /etc/fstab:
    sudo sed -i '/swap/d' /etc/fstab

2 - Enable IP Forwarding
    Kubernetes requires IP forwarding to be enabled to route traffic between pods and external networks.
        Load the Required Kernel Modules:
            cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
            br_netfilter
            overlay
            EOF
            sudo modprobe br_netfilter
            sudo modprobe overlay
        Enable IP Forwarding by Setting Sysctl Parameters:
            cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
            net.bridge.bridge-nf-call-iptables = 1
            net.bridge.bridge-nf-call-ip6tables = 1
            net.ipv4.ip_forward = 1
            EOF
        Apply the Sysctl Settings:
            sudo sysctl --system
        Verify IP forwarding:
            sysctl net.ipv4.ip_forward

3 - Set Up Firewalls and AWS Security Groups    
    Ensure the necessary Kubernetes ports are open in your AWS security groups:
        Port 6443 (Kubernetes API server)
        Port 2379-2380 (etcd server client API)
        Port 10250 (Kubelet API)
        Port 10251-10252 (Scheduler, Controller Manager)
        Port 179 (for Calico if you use it as the network plugin)        

4 - Install the Containerd
        yum install containerd
        systemctl start containerd
        systemctl status containerd

    a - Check if crictl is installed, if not then follow the below steps to install the same. This is required to communicate to containerd 
            VERSION="v1.30.0"
            curl -LO "https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$VERSION-linux-amd64.tar.gz"
            tar -xvf "crictl-$VERSION-linux-amd64.tar.gz" -C /usr/local/bin
            chmod +x /usr/local/bin/crictl

5 - Install Kubernetes  Necessary Dependencies
        a - Set SELinux to permissive mode:
                sudo setenforce 0
                sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
        b - Set the yum repositories
                cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
                [kubernetes]
                name=Kubernetes
                baseurl=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/
                enabled=1
                gpgcheck=1
                gpgkey=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/repodata/repomd.xml.key
                exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
                EOF
        c - Install the below
                yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
                systemctl enable --now kubelet

6 - Configuring a cgroup driver 
        Both the container runtime and the kubelet have a property called "cgroup driver", which is important for the management of cgroups on Linux machines.
        I am sticking to systemc cgroup. Check with below command to know its systemd or not
             ps -p 1

7 - Creating a cluster with kubeadm
        kubeadm init --apiserver-advertise-address=194.12.1.81 --apiserver-cert-extra-sans=controlplane --pod-network-cidr=10.244.0.0/16

        Once done, set the kubeconfig file path for the user
            mkdir -p $HOME/.kube
            sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
            sudo chown $(id -u):$(id -g) $HOME/.kube/config
        
        Copy the kubectl join command to add the nodes to the cluster
            kubeadm join 194.12.1.81:6443 --token q7uyt7.exrbwsvfc2l2bt8n --discovery-token-ca-cert-hash sha256:70ba527f4d17deaa53a8eb659220f404f07249f8fa26ee5b6d42bfe4217deae8 
        
        After this step run - kubectl get nodes to see the nodes

8 - Install the network plug-in . Follow the documentation. I am using the below command to setup the network plugin    
        kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
        check with pod status
            kubectl get pods -n kube-flannel

9 - Kubernetes worker node
    a - Follow the same steps from 1-6 to install the required linux binaries
    b - run the kubectl join command 
        kubeadm join 194.12.1.81:6443 --token q7uyt7.exrbwsvfc2l2bt8n --discovery-token-ca-cert-hash sha256:70ba527f4d17deaa53a8eb659220f404f07249f8fa26ee5b6d42bfe4217deae8 


